name: Ultimate Live CI/CD Runner

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  ultimate-runner:
    runs-on: [self-hosted, windows]
    timeout-minutes: 43200  # 30 يوم
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Ghassan Runner User & Admin
        shell: pwsh
        env:
          RUN_PASS: ${{ secrets.GH_RUNNER_PASSWORD }}
        run: |
          $user = 'Ghassan'
          $exists = Get-LocalUser -Name $user -ErrorAction SilentlyContinue
          if (-not $exists) {
              $secure = ConvertTo-SecureString $env:RUN_PASS -AsPlainText -Force
              New-LocalUser -Name $user -Password $secure -FullName "Ghassan Runner" -Description "Ultimate Self-hosted runner user" -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member $user
              Write-Host "User $user created and added to Administrators."
          } else { Write-Host "User $user already exists." }

      - name: Install Chocolatey (if missing)
        shell: pwsh
        run: |
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

      - name: Install Tools (Node.js, Python, .NET, FFmpeg)
        shell: pwsh
        run: |
          $pkgs = @('nodejs-lts','python','dotnet','ffmpeg')
          foreach ($p in $pkgs) {
            if (-not (choco list --local-only | Select-String $p)) { choco install $p -y --no-progress }
          }
          $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User')

      - name: Detect Projects & Install Dependencies
        shell: pwsh
        run: |
          if (Test-Path "package.json") {
              Write-Host "Node.js project detected."
              npm install
          }
          if (Test-Path "requirements.txt") {
              Write-Host "Python project detected."
              python -m pip install --upgrade pip
              python -m pip install -r requirements.txt
          }
          if (Get-ChildItem *.csproj -ErrorAction SilentlyContinue) {
              Write-Host ".NET project detected."
              dotnet restore
          }

      - name: Run Tests
        shell: pwsh
        run: |
          if (Test-Path "package.json") { npm test || exit 1 }
          if (Test-Path "requirements.txt") { python -m unittest discover || exit 1 }
          if (Get-ChildItem *.csproj -ErrorAction SilentlyContinue) { dotnet test || exit 1 }

      - name: Build / Package
        shell: pwsh
        run: |
          if (Test-Path "package.json") { npm run build || exit 1 }
          if (Get-ChildItem *.csproj -ErrorAction SilentlyContinue) { dotnet build || exit 1 }

      - name: Deploy Automatically
        shell: pwsh
        run: |
          Write-Host "Deploy commands go here. يمكنك وضع أي أوامر نشر تلقائي لكل مشروع."

      - name: Show Runner Info
        shell: pwsh
        run: |
          Write-Host "Runner Computer: $env:COMPUTERNAME"
          Write-Host "Runner User: Ghassan"
          Write-Host "Projects detected automatically, Build/Test/Deploy completed."

      - name: Live Mode — Keep Runner Active
        if: ${{ github.event.inputs.keep_live == 'true' || github.event_name == 'workflow_dispatch' }}
        shell: pwsh
        run: |
          Write-Host "`n=== ULTIMATE LIVE MODE ACTIVE ==="
          while ($true) {
              Write-Host "[$(Get-Date)] Runner Ghassan active and ready for any new Workflow"
              Start-Sleep -Seconds 300
          }
